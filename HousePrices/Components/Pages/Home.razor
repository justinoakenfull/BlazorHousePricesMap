@page "/"
@rendermode InteractiveServer
@using HousePrices.Services.Interfaces
@using HousePrices.Models
@inject IPropertyDataService PropertyDataService
@inject IJSRuntime JSRuntime

<PageTitle>Property Map</PageTitle>

<h1>Property Map</h1>

<div class="d-flex justify-content-between align-items-center py-2">
    <div class="d-flex align-items-center gap-3">
        <span>Welcome to your property map.</span>
        @if (isLoading)
        {
            <div class="spinner-border spinner-border-sm text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <span class="text-muted">Loading properties...</span>
        }
        else if (mapData != null)
        {
            <span class="badge bg-info">@mapData.TotalProperties properties</span>
            <span class="badge bg-success">Avg: @mapData.AveragePrice.ToString("C0")</span>
        }
    </div>
    <div class="d-flex gap-2">
        <div class="d-flex align-items-center gap-1">
            <label class="form-label mb-0 small">Properties:</label>
            <input type="number" class="form-control form-control-sm" style="width: 80px;"
                   @bind="propertiesCount" @bind:after="LoadRegionData"
                   min="10" max="1000" />
        </div>
        <select class="form-select form-select-sm" style="width: auto;" @bind="selectedRegion" @bind:after="LoadRegionData">
            <option value="Sydney">Sydney</option>
            <option value="Melbourne">Melbourne</option>
            <option value="Brisbane">Brisbane</option>
            <option value="Perth">Perth</option>
            <option value="Adelaide">Adelaide</option>
        </select>
        <button class="btn btn-primary btn-sm" @onclick="MaxMapSize">
            Max map size
        </button>
        <button class="btn btn-outline-secondary btn-sm" @onclick="ToggleHeatmap">
            @(showHeatmap ? "Hide" : "Show") Heatmap
        </button>
        <button class="btn btn-outline-info" @onclick="RefreshData">
            <i class="bi bi-arrow-clockwise alert-dark"></i> Refresh
        </button>
    </div>
</div>

<div class="map-container">
    <div id="map"></div>
    <div class="resize-handle"></div>
</div>

<div class="mt-3">
    <div class="row">
        <div class="col-md-3">
            <div class="card">
                <div class="card-body text-center">
                    <h6 class="card-title text-success">Budget</h6>
                    <span class="badge bg-success">●</span>
                    <p class="card-text small mb-0">Under $500k</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card">
                <div class="card-body text-center">
                    <h6 class="card-title text-primary">Mid-range</h6>
                    <span class="badge bg-primary">●</span>
                    <p class="card-text small mb-0">$500k - $1M</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card">
                <div class="card-body text-center">
                    <h6 class="card-title text-warning">Premium</h6>
                    <span class="badge bg-warning">●</span>
                    <p class="card-text small mb-0">$1M - $2M</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card">
                <div class="card-body text-center">
                    <h6 class="card-title text-danger">Luxury</h6>
                    <span class="badge bg-danger">●</span>
                    <p class="card-text small mb-0">Over $2M</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private MapLayerData? mapData;
    private string selectedRegion = "Sydney";
    private int propertiesCount = 100;
    private bool isLoading = true;
    private bool showHeatmap = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Wait a bit for the DOM to be ready
                await Task.Delay(500);

                // Initialize the map first
                await JSRuntime.InvokeVoidAsync("initializePropertyMap");

                // Then load the data
                await LoadRegionData();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in OnAfterRenderAsync: {ex.Message}");
            }
        }
    }

    private async Task LoadRegionData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            Console.WriteLine($"Loading data for region: {selectedRegion}");
            mapData = await PropertyDataService.GetMapLayerDataAsync(selectedRegion, propertiesCount);
            Console.WriteLine($"Loaded {mapData?.TotalProperties} properties");

            if (mapData != null)
            {
                Console.WriteLine($"Calling updateMapData with {mapData.Markers.Count} markers");
                await JSRuntime.InvokeVoidAsync("updateMapData", mapData.Markers, mapData.HeatmapPoints, selectedRegion);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task MaxMapSize()
    {
        Console.WriteLine("Changing map size.");
        try
        {
            await JSRuntime.InvokeVoidAsync("maxMapSize");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error calling maxMapSize: {ex.Message}");
        }
    }

    private async Task ToggleHeatmap()
    {
        showHeatmap = !showHeatmap;
        await JSRuntime.InvokeVoidAsync("toggleHeatmap", showHeatmap);
    }

    private async Task RefreshData()
    {
        await LoadRegionData();
    }
}